# Generated by Django 5.0.3 on 2024-05-11 17:46

import assets.storages
import assets.validators.asset_validators
import core.helpers
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AudioFile',
            fields=[
                ('uuid', models.UUIDField(default=core.helpers.get_uuid, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128)),
                ('hash', models.CharField(default='', editable=False, max_length=64)),
                ('file', models.FileField(help_text='поддерживаются .ogg, .wav, .mp3 файлы', storage=assets.storages.OverwriteStorage(location='/media/audio'), upload_to='', validators=[assets.validators.asset_validators.audio_validator])),
            ],
            options={
                'verbose_name': 'Аудио файл',
                'verbose_name_plural': 'Аудио файлы',
            },
        ),
        migrations.CreateModel(
            name='HackGame',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attempts', models.IntegerField(default=3)),
                ('difficulty', models.IntegerField(choices=[(6, 'easy'), (8, 'normal'), (10, 'medium'), (12, 'hard')], default=8)),
                ('wordcount', models.IntegerField(default=15)),
                ('chance', models.IntegerField(default=15)),
            ],
            options={
                'verbose_name': 'Настройки мини-игры Fallout Hack',
            },
        ),
        migrations.CreateModel(
            name='ImageFile',
            fields=[
                ('uuid', models.UUIDField(default=core.helpers.get_uuid, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128)),
                ('hash', models.CharField(default='', editable=False, max_length=64)),
                ('file', models.ImageField(help_text='поддерживаются .png, .jpg, .webp файлы', storage=assets.storages.OverwriteStorage(location='/media/image'), upload_to='', validators=[assets.validators.asset_validators.image_validator])),
            ],
            options={
                'verbose_name': 'Изображение',
                'verbose_name_plural': 'Изображения',
            },
        ),
        migrations.CreateModel(
            name='TextFile',
            fields=[
                ('uuid', models.UUIDField(default=core.helpers.get_uuid, editable=False, primary_key=True, serialize=False)),
                ('hash', models.CharField(default='', editable=False, max_length=64)),
                ('ident', models.CharField(help_text='Только латиница и цифры. Не будет виден игрокам.', max_length=128, unique=True, validators=[django.core.validators.RegexValidator(message='Only alphanumeric characters are allowed.', regex='^[a-zA-Z0-9]+$')], verbose_name='Идентификатор')),
                ('name', models.CharField(help_text='Это название файла будет видно игрокам.', max_length=128, verbose_name='Название файла')),
                ('content', models.TextField(help_text='Введенный текст будет сконвертирован в текстовый файл после сохранения.', verbose_name='Содержимое')),
                ('file', models.FileField(blank=True, null=True, storage=assets.storages.OverwriteStorage(location='/media/text'), upload_to='')),
            ],
            options={
                'verbose_name': 'Текстовый файл',
                'verbose_name_plural': 'Текстовые файлы',
            },
        ),
        migrations.CreateModel(
            name='UserInput',
            fields=[
                ('uuid', models.UUIDField(default=core.helpers.get_uuid, editable=False, primary_key=True, serialize=False)),
                ('action', models.CharField(default='action', help_text='Значение будет передано в составе INFO пакета `action: <значение>`', max_length=64, unique=True, verbose_name='Передаваемое значение')),
                ('expected', models.CharField(blank=True, default='', help_text='По этому значению может быть выполнена проверка поля `user_input` INFO пакета', max_length=128, verbose_name='Ожидаемое значение')),
                ('delay', models.IntegerField(blank=True, default=0, null=True, verbose_name='Задержка интерфейса пользователя')),
            ],
            options={
                'verbose_name': 'Пользовательский интерфейс ввода',
                'verbose_name_plural': 'Пользовательские интерфейсы ввода',
            },
        ),
        migrations.CreateModel(
            name='VideoFile',
            fields=[
                ('uuid', models.UUIDField(default=core.helpers.get_uuid, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128)),
                ('hash', models.CharField(default='', editable=False, max_length=64)),
                ('file', models.FileField(help_text='поддерживаются .webm, .mp4 файлы', storage=assets.storages.OverwriteStorage(location='/media/video'), upload_to='', validators=[assets.validators.asset_validators.video_validator])),
            ],
            options={
                'verbose_name': 'Видео файл',
                'verbose_name_plural': 'Видео файлы',
            },
        ),
    ]
